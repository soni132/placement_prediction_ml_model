import numpy as np
import pandas as pd
df=pd.read_csv("/content/placement.csv")
df=df.drop(columns=['Unnamed: 0'])
df.info()
df.head()

import matplotlib.pyplot as plt
plt.scatter(df['cgpa'],df['placement'],label="placement")
plt.legend()
plt.xlabel("cgpa")
plt.ylabel("placement")
plt.show()
#cgpa<6--->not placed
#cgpa>6-->placed

plt.scatter(df['cgpa'],df['iq'],c=df["placement"],cmap='bwr',alpha=0.7)
plt.colorbar(label="placement")

plt.xlabel("cgpa")
plt.ylabel("iq")
plt.show()
#

import matplotlib.pyplot as plt

plt.scatter(df['cgpa'], df['iq'], c=df["placement"], cmap='bwr', alpha=0.7)
plt.xlabel("CGPA")
plt.ylabel("IQ")
plt.title("Scatter plot of CGPA vs IQ colored by Placement")
plt.colorbar(label="Placement")
plt.show()


#LOGISTIC REGRATION
#split data into dependent and inependent varibles
x=df.iloc[:,0:2]#ror all 0:100,col 0 :2
y=df.iloc[:,-1]#all rows,last col
y.shape


#tain test split
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1)# default random state means always x_test changes after runing the same split cide
x_test

#standard sacling
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.transform(x_test)
x_test

#logistic regration
from sklearn.linear_model import LogisticRegression
model=LogisticRegression()
model.fit(x_train,y_train)

#pricition
y_pred=model.predict(x_test)
y_pred

#accurecty_srore
from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

#plot decision boundry
from mlxtend.plotting import plot_decision_regions

plt.figure(figsize=(8, 6))
plot_decision_regions(x_train, y_train.values, clf=model, legend=2)
plt.xlabel("CGPA (Standardized)")
plt.ylabel("IQ (Standardized)")
plt.title("Decision Boundary of Logistic Regression Model")
plt.show()
